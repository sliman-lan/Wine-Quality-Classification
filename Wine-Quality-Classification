{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7114803",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:06.325143Z",
     "iopub.status.busy": "2025-05-17T02:34:06.324759Z",
     "iopub.status.idle": "2025-05-17T02:34:10.693773Z",
     "shell.execute_reply": "2025-05-17T02:34:10.692817Z"
    },
    "papermill": {
     "duration": 4.375827,
     "end_time": "2025-05-17T02:34:10.695449",
     "exception": false,
     "start_time": "2025-05-17T02:34:06.319622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/wine-quality-classification/wine_quality_classification.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77427c1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.703481Z",
     "iopub.status.busy": "2025-05-17T02:34:10.703019Z",
     "iopub.status.idle": "2025-05-17T02:34:10.722279Z",
     "shell.execute_reply": "2025-05-17T02:34:10.721345Z"
    },
    "papermill": {
     "duration": 0.02481,
     "end_time": "2025-05-17T02:34:10.724080",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.699270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/wine-quality-classification/wine_quality_classification.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "97cdca66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.732104Z",
     "iopub.status.busy": "2025-05-17T02:34:10.731509Z",
     "iopub.status.idle": "2025-05-17T02:34:10.757735Z",
     "shell.execute_reply": "2025-05-17T02:34:10.756757Z"
    },
    "papermill": {
     "duration": 0.031806,
     "end_time": "2025-05-17T02:34:10.759238",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.727432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed_acidity</th>\n",
       "      <th>residual_sugar</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>density</th>\n",
       "      <th>quality_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "      <td>13.6</td>\n",
       "      <td>1.0005</td>\n",
       "      <td>high</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.9912</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11.6</td>\n",
       "      <td>0.9</td>\n",
       "      <td>8.2</td>\n",
       "      <td>0.9935</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12.9</td>\n",
       "      <td>6.6</td>\n",
       "      <td>12.7</td>\n",
       "      <td>1.0002</td>\n",
       "      <td>low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.9</td>\n",
       "      <td>13.8</td>\n",
       "      <td>10.4</td>\n",
       "      <td>0.9942</td>\n",
       "      <td>medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed_acidity  residual_sugar  alcohol  density quality_label\n",
       "0            9.3             6.4     13.6   1.0005          high\n",
       "1           11.2             2.0     14.0   0.9912        medium\n",
       "2           11.6             0.9      8.2   0.9935           low\n",
       "3           12.9             6.6     12.7   1.0002           low\n",
       "4           13.9            13.8     10.4   0.9942        medium"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2ab90ec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.767060Z",
     "iopub.status.busy": "2025-05-17T02:34:10.766291Z",
     "iopub.status.idle": "2025-05-17T02:34:10.774047Z",
     "shell.execute_reply": "2025-05-17T02:34:10.773089Z"
    },
    "papermill": {
     "duration": 0.013249,
     "end_time": "2025-05-17T02:34:10.775644",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.762395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/3658942165.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  data['quality_label'].replace(['low',  'medium' , 'high'    ],[0,1,2], inplace=True)\n",
      "/tmp/ipykernel_13/3658942165.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  data['quality_label'].replace(['low',  'medium' , 'high'    ],[0,1,2], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "data['quality_label'].replace(['low',  'medium' , 'high'    ],[0,1,2], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c4bcbbdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.783459Z",
     "iopub.status.busy": "2025-05-17T02:34:10.783154Z",
     "iopub.status.idle": "2025-05-17T02:34:10.788282Z",
     "shell.execute_reply": "2025-05-17T02:34:10.787512Z"
    },
    "papermill": {
     "duration": 0.010629,
     "end_time": "2025-05-17T02:34:10.789650",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.779021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X =data.select_dtypes(include='number')\n",
    "y = data[\"quality_label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "56a2489d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.797437Z",
     "iopub.status.busy": "2025-05-17T02:34:10.797103Z",
     "iopub.status.idle": "2025-05-17T02:34:10.825472Z",
     "shell.execute_reply": "2025-05-17T02:34:10.824780Z"
    },
    "papermill": {
     "duration": 0.034035,
     "end_time": "2025-05-17T02:34:10.826997",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.792962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed_acidity</th>\n",
       "      <th>residual_sugar</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>density</th>\n",
       "      <th>quality_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.00000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>10.174300</td>\n",
       "      <td>7.69200</td>\n",
       "      <td>11.039900</td>\n",
       "      <td>0.997505</td>\n",
       "      <td>1.041000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.452693</td>\n",
       "      <td>4.20892</td>\n",
       "      <td>1.760283</td>\n",
       "      <td>0.004300</td>\n",
       "      <td>0.802473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.50000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.100000</td>\n",
       "      <td>4.10000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>0.993900</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>10.400000</td>\n",
       "      <td>7.55000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0.997400</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>13.125000</td>\n",
       "      <td>11.50000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>1.001200</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>15.00000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>1.005000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixed_acidity  residual_sugar      alcohol      density  quality_label\n",
       "count    1000.000000      1000.00000  1000.000000  1000.000000    1000.000000\n",
       "mean       10.174300         7.69200    11.039900     0.997505       1.041000\n",
       "std         3.452693         4.20892     1.760283     0.004300       0.802473\n",
       "min         4.000000         0.50000     8.000000     0.990000       0.000000\n",
       "25%         7.100000         4.10000     9.500000     0.993900       0.000000\n",
       "50%        10.400000         7.55000    11.000000     0.997400       1.000000\n",
       "75%        13.125000        11.50000    12.600000     1.001200       2.000000\n",
       "max        16.000000        15.00000    14.000000     1.005000       2.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "98a5c553",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.835362Z",
     "iopub.status.busy": "2025-05-17T02:34:10.834781Z",
     "iopub.status.idle": "2025-05-17T02:34:10.840368Z",
     "shell.execute_reply": "2025-05-17T02:34:10.839520Z"
    },
    "papermill": {
     "duration": 0.01145,
     "end_time": "2025-05-17T02:34:10.841824",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.830374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1000, 5), (1000,))"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "02118b05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.849967Z",
     "iopub.status.busy": "2025-05-17T02:34:10.849340Z",
     "iopub.status.idle": "2025-05-17T02:34:10.867731Z",
     "shell.execute_reply": "2025-05-17T02:34:10.866883Z"
    },
    "papermill": {
     "duration": 0.024333,
     "end_time": "2025-05-17T02:34:10.869585",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.845252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   fixed_acidity   1000 non-null   float64\n",
      " 1   residual_sugar  1000 non-null   float64\n",
      " 2   alcohol         1000 non-null   float64\n",
      " 3   density         1000 non-null   float64\n",
      " 4   quality_label   1000 non-null   int64  \n",
      "dtypes: float64(4), int64(1)\n",
      "memory usage: 39.2 KB\n"
     ]
    }
   ],
   "source": [
    "X.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5ca7a8cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.877974Z",
     "iopub.status.busy": "2025-05-17T02:34:10.877657Z",
     "iopub.status.idle": "2025-05-17T02:34:10.884837Z",
     "shell.execute_reply": "2025-05-17T02:34:10.884146Z"
    },
    "papermill": {
     "duration": 0.012884,
     "end_time": "2025-05-17T02:34:10.886164",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.873280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b86e745d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.894599Z",
     "iopub.status.busy": "2025-05-17T02:34:10.893746Z",
     "iopub.status.idle": "2025-05-17T02:34:10.902297Z",
     "shell.execute_reply": "2025-05-17T02:34:10.901436Z"
    },
    "papermill": {
     "duration": 0.014223,
     "end_time": "2025-05-17T02:34:10.903777",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.889554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.25, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bad61a70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:10.911889Z",
     "iopub.status.busy": "2025-05-17T02:34:10.911589Z",
     "iopub.status.idle": "2025-05-17T02:34:11.092546Z",
     "shell.execute_reply": "2025-05-17T02:34:11.091724Z"
    },
    "papermill": {
     "duration": 0.186656,
     "end_time": "2025-05-17T02:34:11.093976",
     "exception": false,
     "start_time": "2025-05-17T02:34:10.907320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = RandomForestClassifier()\n",
    "\n",
    "\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "24e654c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:11.102991Z",
     "iopub.status.busy": "2025-05-17T02:34:11.102208Z",
     "iopub.status.idle": "2025-05-17T02:34:11.118121Z",
     "shell.execute_reply": "2025-05-17T02:34:11.117239Z"
    },
    "papermill": {
     "duration": 0.021971,
     "end_time": "2025-05-17T02:34:11.119700",
     "exception": false,
     "start_time": "2025-05-17T02:34:11.097729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "y_pred = model.predict(X_test)\n",
    "accuracy_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "766e88d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-17T02:34:11.128542Z",
     "iopub.status.busy": "2025-05-17T02:34:11.128220Z",
     "iopub.status.idle": "2025-05-17T02:34:11.137855Z",
     "shell.execute_reply": "2025-05-17T02:34:11.136962Z"
    },
    "papermill": {
     "duration": 0.01576,
     "end_time": "2025-05-17T02:34:11.139342",
     "exception": false,
     "start_time": "2025-05-17T02:34:11.123582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[77,  0,  0],\n",
       "       [ 0, 82,  0],\n",
       "       [ 0,  0, 91]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7018321,
     "sourceId": 11234696,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.191395,
   "end_time": "2025-05-17T02:34:11.864090",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-17T02:34:00.672695",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
